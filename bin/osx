#!/usr/bin/env bash

# constants
readonly PROGNAME="$(basename "$0")"
readonly PROGDIR="/usr/local/opt/osx"
readonly VERSION=$(cat "$PROGDIR/VERSION.md")
readonly TODAY=$(date +"%m-%d-%y")
readonly ARGS="$@"

# utility functions
_is_empty() {
	local var=$1
	[[ -z $var ]]
}
_is_not_empty() {
	local var=$1
	[[ -n $var ]]
}
_exists() {
	local var=$1
	[[ -e $var ]]
}
is_file() {
	local file=$1
	[[ -f $file ]]
}
_is_dir() {
	local dir=$1
	[[ -d $dir ]]
}
_is_not_valid_option() {
	local option=$1
	printf "bash: %s: %s: invalid option\n" "$PROGNAME" "$option"
}
_usage() {
	printf "%s: usage: %s [-h|--help] [--prefix] [-v|--version]"  "$PROGNAME" "$PROGNAME"
}
_print_help() {
	cat <<- EOF
	usage: $PROGNAME [options]

	Set OS X defaults

	OPTIONS:
    -h --help              Show this help
    -t --test              Run unit test to check the program
    -v --version           Display version
    --prefix               Display install path. Default: $PROGDIR

	Examples:
    Run all tests:
    $PROGNAME --test

    Print current version:
    $PROGNAME --version

    Run:
    $PROGNAME
	EOF
}
_print_directory() {
	echo "$PROGDIR"
}
_edit() {
	cd "$PROGDIR" \
	&& vim
}
_run_tests() {
	_require_prog roundup "Roundup is required to run tests" https://github.com/bmizerany/roundup \
	&& roundup ./tests/*.sh
}
_version() {
	printf 'Version %s\n' "$VERSION"
}

# options
cmdline() {
	# got this idea from here:
	# http://kirk.webfinish.com/2009/10/bash-shell-script-to-use-getopts-with-gnu-style-long-positional-parameters/
	local arg=
	for arg
	do
		local delim=""
		case "$arg" in
			#translate --gnu-long-options to -g (short options)
			--edit)         args="${args}-e ";;
			--help)         args="${args}-h ";;
			--prefix)       args="${args}-p ";;
			--test)         args="${args}-t ";;
			--version)      args="${args}-v ";;
			#pass through anything else
			*) [[ "${arg:0:1}" == "-" ]] || delim="\""
				args="${args}${delim}${arg}${delim} ";;
		esac
	done

	#Reset the positional parameters to the short options
	eval set -- "$args"

	while getopts ":ehptv" OPTION
	do
		case $OPTION in
			e)
				_edit
				exit 0
				;;
			h)
				_print_help
				exit 0
				;;
			p)
				_print_directory
				exit 0
				;;
			t)
				_run_tests
				exit 0
				;;
			v)
				_version
				exit 0
				;;
			\?)
				_is_not_valid_option "-$OPTARG"
				usage
				exit 1
				;;
		esac
	done

	return 0
}

setup_permissions() {
	# Ask for the administrator password upfront
	sudo -v

	# Keep-alive: update existing `sudo` time stamp until 'osxdefaults' has finished
	while true
	do
		sudo -n true
		sleep 60
		kill -0 "$$" || exit
	done 2>/dev/null &
}

killall_apps() {
	local app
	for app in "Activity Monitor" "Address Book" "Calendar" "Contacts" \
		"Dashboard" "Dock" "Finder" "Calendar" "iTunes" "Mail" "Messages" \
		"Preview" "Safari" "SystemUIServer" "TextEdit"
	do
		killall "${app}" > /dev/null 2>&1
	done
}

restart_machine() {
	read -p "Restart? (y/n) " -n 1

	if [[ "$REPLY" =~ ^[Yy]$ ]]; then
		sudo shutdown -r now
	else
		killall_apps
	fi
}

setup_apps() {
	local app
	local apps="$PROGDIR/lib/*"

	for app in $apps
	do
		bash "$app"
	done
}

main() {
	cmdline "$ARGS"

	printf "%s⚠ Warning:%s This will modify your OS X system defaults!\n" "$(tput setaf 3)" "$(tput sgr0)" \
	&& setup_permissions

	setup_apps

	printf "\n%s⚠ Warning:%s Restart is required for most changes to take effect!\n\n" "$(tput setaf 3)" "$(tput sgr0)" \
	&& restart_machine
}

main
